spring:
  application:
    name: g2-oms-extension
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:default}
  cloud:
    nacos:
      discovery:
        server-addr: ${SPRING_CLOUD_NACOS_SERVER_ADDR:47.116.142.91:8848}
        # nacos 配置文件名规则，${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
      config:
        enabled: ${SPRING_CLOUD_NACOS_CONFIG_ENABLED:true}
        server-addr: ${SPRING_CLOUD_NACOS_SERVER_ADDR:47.116.142.91:8848}
        file-extension: yaml
        namespace: ${SPRING_CLOUD_NACOS_CONFIG_NAMESPACE:cd2a985d-35cf-4281-babb-20fc894e63df}
        group: ${SPRING_CLOUD_NACOS_CONFIG_GROUP:G2-BACKEND-GOURP}
        # 动态刷新配置文件
        refreshable-dataids: ${SPRING_CLOUD_NACOS_CONFIG_DATAID:${spring.application.name}-${spring.profiles.active}.yaml}
    alibaba:
      seata:
        tx-service-group:

server:
  port: 9040
  undertow:
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
    # 默认值为8，建议设置每个CPU核心一个线程
    io-threads: ${SERVER_UNDERTOW_IO_THREADS:4}
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
    # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
    worker-threads: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    # 默认false
    direct-buffers: true
    # HTTP POST请求最大的大小
    # 默认0，无限制，可设置10M
    max-http-post-size: 10485760

management:
  server:
    port: 9041
  endpoints:
    web:
      exposure:
        include: '*'

# 开启feign熔断机制
feign:
  hystrix:
    enabled: true

# 配置服务降级、服务熔断、服务限流
hystrix:
  # 服务限流 最大线程数不能超过1000
  threadpool:
    default:
      # 执行命令线程池的核心线程数，也是命令执行的最大并发量
      # 默认10
      coreSize: 1000
      # 最大执行线程数
      maximumSize: 1000
  # 服务降级、熔断
  command:
    default:
      execution:
        isolation:
          thread:
            # HystrixCommand 执行的超时时间，超时后进入降级处理逻辑。一个接口，理论的最佳响应速度应该在200ms以内，或者慢点的接口就几百毫秒。
            # 默认 1000 毫秒，最高设置 2000足矣。如果超时，首先看能不能优化接口相关业务、SQL查询等，不要盲目加大超时时间，否则会导致线程堆积过多，hystrix 线程池卡死，最终服务不可用。
            timeoutInMilliseconds: ${HYSTRIX_COMMAND_TIMEOUT_IN_MILLISECONDS:3000}
  shareSecurityContext: true

# 设置feign客户端超时时间
ribbon:
  # 客户端读取时间，两端正常连接时间，需要小于hystrix断路器时间
  ReadTimeout: ${RIBBON_READ_TIMEOUT:3000}
  # 客户端连接服务器超时时间
  ConnectTimeout: ${RIBBOM_CONNECTION_TIMEOUT:3000}
  # 访问实例失败(超时)，允许自动重试，设置重试次数，失败后会更换实例访问，请一定确保接口的幂等性，否则重试可能导致数据异常。
  OkToRetryOnAllOperations: true
  MaxAutoRetries: 1
  MaxAutoRetriesNextServer: 1

logging:
  level:
    org.g2: ${LOG_LEVEL:debug}
    com.netflix: ${LOG_LEVEL:warn}

